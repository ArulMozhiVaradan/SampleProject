version: '3.4'

services:

  sampleprojectdb:
    container_name: sampleprojectdb
    environment:
      - SA_PASSWORD=Admin1234!!
      - ACCEPT_EULA=Y
    restart: always
    ports:
      - 8600:1433
    networks:
      - sampleproject_network

  sampleproject.api:
    container_name: sampleproject.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8001
      - ConnectionStrings:DefaultConnection=Server=sampleprojectdb;Database=SampleProjectDB;User Id=sa;Password=Admin1234!!;TrustServerCertificate=True;
      # Connect sampleprojectdb in SSMS using IpConfig -> Ethernet adapter vEthernet (WSL) -> Ip V4
      - ConnectionStrings:RedisConnection=redis:6379,defaultdatabase=11
      # Check redis content -> docker exec -it redis redis-cli
      - HealthCheck:Uri=http://localhost:8001/healthz
    ports:
      - "8001:8001"
    depends_on:
      - sampleprojectdb
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
    networks:
      - sampleproject_network

  anothersampleprojectdb:
    container_name: anothersampleprojectdb
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Admin1234
      - POSTGRES_DB=anothersampleprojectdb
    restart: always
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  anothersampleproject.api:
    container_name: anothersampleproject.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8002
      - ConnectionStrings:DefaultConnection=Server=anothersampleprojectdb;Port=5432;Database=anothersampleprojectdb;User Id=postgres;Password=Admin1234
    depends_on:
      - anothersampleprojectdb
    ports:
      - 8002:8002

  prometheus:
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/Monitoring/prometheus.yml
    ports:
      - "8090:9090"
    depends_on:
      - sampleproject.api
    networks:
      - sampleproject_network

  grafana:
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3700:3000"
    depends_on:
      - prometheus
    networks:
      - sampleproject_network

  redis:
    container_name: redis
    ports:
      - "6379:6379"
      - "8101:8001"
    networks:
      - sampleproject_network
 
  elasticsearch:
    container_name: elasticsearch
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "8200:9200"
      - "8300:9300"
    networks:
      - sampleproject_network

  kibana:
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://localhost:9200
      - XPACK_SECURITY_ENABLED=false
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - sampleproject_network
 
  pgadmin:
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=behzad@dara.com
      - PGADMIN_DEFAULT_PASSWORD=admin1234
    restart: always
    ports:
      - 5050:80
    volumes:
      - pgadmin_data:/root/.pgadmin

  portainer:
    container_name: portainer
    restart: always
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

networks:
  sampleproject_network:
    driver: bridge

volumes:
  elasticsearch-data: